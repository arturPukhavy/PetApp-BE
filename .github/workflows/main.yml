name: Build, Update Database, and Copy to S3
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # Step to set up .NET Core SDK
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0'  # Update this with your .NET version

    # Step to build the application
    - name: Build the Project
      run: dotnet build ./PetApp.WebAPI.sln --configuration Release

    # Step to run tests

    # Install EF Core tools
    - name: Install EF tools
      run: dotnet tool install --global dotnet-ef

    # Step to run migrations
    - name: Update Database
      run: dotnet ef database update --project ./PetApp.WebAPI/PetApp.WebAPI.csproj
      env:
        PetAppConnectionString: ${{ secrets.DB_CONNECTION_STRING }}

    # Step to publish the application files
    - name: Publish the Project
      run: dotnet publish ./PetApp.WebAPI/PetApp.WebAPI.csproj -c Release -o publish

    # Step to copy published files to S3
    - name: Copy Files to S3
      if: success()
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --delete
      env:
        AWS_S3_BUCKET: ${{ secrets.S3_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: 'us-east-1'  # Optional: defaults to us-east-1
        SOURCE_DIR: 'publish'

    # Step to copy to EC2
    - name: Copy to EC2
      uses: crazy-max/ghaction-winrm@v1
      with:
        hostname: ${{ secrets.EC2_IP }}
        username: ${{ secrets.WINRM_USERNAME }}
        password: ${{ secrets.WINRM_PASSWORD }}
        operation_timeout: 120
        script: |
          # Import the WebAdministration module
            Import-Module WebAdministration
          # Stop the IIS site
            Stop-WebSite -Name "PetApp"
          # Verify the site is stopped
            $site = Get-WebSite -Name "PetApp"
            Write-Output "The site state is: $($site.State)"
          # sync the latest binaries
            aws s3 cp s3://dev-pet-share-webapi C:\PetApp --recursive
            Start-Sleep -Seconds 10
            Start-WebSite -Name "PetApp"
            Write-Output "The site state is: $($site.State)"

    # Optional: Run after-deployment tests or health checks
